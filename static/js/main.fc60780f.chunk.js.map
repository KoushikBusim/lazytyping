{"version":3,"sources":["key-mappings.js","keyboard-data.js","DisplayKeyboard.js","App.js","serviceWorker.js","index.js"],"names":["key_mappings","keyboard_data","DisplayKeyboard","rows","state","detectOS","navigator","platform","console","log","this","props","pressed_key","className","num","map","key_data","index","ctrl","shift","normal","top","hme","btm","React","Component","App","getPractiseKeys","practise_keys","error_indexes","keyIndex","keyValue","letters","split","includes","push","join","finished","length","letter","letterStyle","current_index","key","handleKeys","keys","onKeyEvent","e","setState","pressed_key_code","key_code","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"oSA8DeA,G,MA9DM,CACra,YACb,MAAS,QACT,MAAS,QACT,IAAK,IACL,IAAK,IACL,IAAK,MCyJUC,EApNO,CAClB,KAAQ,CAAC,MAAM,MAAM,MAAM,MAAM,QACjC,IAAO,CACC,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACA,KAAQ,cAGhB,IAAO,CACC,CACA,KAAQ,OAER,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,KACV,MAAS,MAGrB,IAAO,CACC,CACI,KAAQ,YAEZ,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACA,KAAQ,UAGhB,IAAO,CACC,CACA,KAAQ,SAER,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,KAEd,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACI,OAAU,IACV,MAAS,KAEb,CACA,KAAQ,UAGpB,KAAQ,CACI,CACA,KAAQ,QAER,CACA,KAAQ,OAER,CACA,KAAQ,OAER,CACA,KAAQ,SAER,CACA,KAAQ,OAER,CACA,KAAQ,UCnHLC,GA1FFD,EAAcE,K,2MAEzBC,MAAQ,G,EACRC,SAAW,WACT,OAAOC,UAAUC,U,wEAIjB,OADAC,QAAQC,IAAI,eAAgBC,KAAKC,MAAMC,aAErC,yBAAKC,UAAU,YACb,yBAAKA,UAAU,gBACZZ,EAAca,IAAIC,KAAI,SAACC,EAASC,GAC/B,MAAI,SAAUD,EACJ,yBAAKH,UAAWG,EAASE,MACvB,yBAAKL,UAAU,eAAeG,EAASE,OAG1C,yBAAKL,UAAU,OACd,yBAAKA,UAAU,WAAWG,EAASG,OACnC,yBAAKN,UAAU,WAAWG,EAASI,aAKjD,yBAAKP,UAAU,gBACZZ,EAAcoB,IAAIN,KAAI,SAACC,EAASC,GAC/B,MAAI,SAAUD,EACJ,yBAAKH,UAAWG,EAASE,MACvB,yBAAKL,UAAU,eAAeG,EAASE,OAG1C,yBAAKL,UAAU,OACd,yBAAKA,UAAU,WAAWG,EAASG,OACnC,yBAAKN,UAAU,WAAWG,EAASI,aAKjD,yBAAKP,UAAU,gBACZZ,EAAcqB,IAAIP,KAAI,SAACC,EAASC,GAC/B,MAAI,SAAUD,EACJ,yBAAKH,UAAWG,EAASE,MACvB,yBAAKL,UAAU,eAAeG,EAASE,OAG1C,yBAAKL,UAAU,OACd,yBAAKA,UAAU,WAAWG,EAASG,OACnC,yBAAKN,UAAU,WAAWG,EAASI,aAKjD,yBAAKP,UAAU,gBACZZ,EAAcsB,IAAIR,KAAI,SAACC,EAASC,GAC/B,MAAI,SAAUD,EACJ,yBAAKH,UAAWG,EAASE,MACvB,yBAAKL,UAAU,eAAeG,EAASE,OAG1C,yBAAKL,UAAU,OACd,yBAAKA,UAAU,WAAWG,EAASG,OACnC,yBAAKN,UAAU,WAAWG,EAASI,aAKjD,yBAAKP,UAAU,gBACZZ,EAAciB,KAAKH,KAAI,SAACC,EAASC,GAChC,MAAI,SAAUD,EACU,UAAlBA,EAASE,KACH,yBAAKL,UAAWG,EAASE,MACvB,yBAAKL,UAAU,iBAGjB,yBAAKA,UAAWG,EAASE,MACvB,yBAAKL,UAAU,eAAeG,EAASE,OAG5C,yBAAKL,UAAU,OACd,yBAAKA,UAAU,WAAWG,EAASG,OACnC,yBAAKN,UAAU,WAAWG,EAASI,kB,GA/E3BI,IAAMC,YCyIrBC,E,2MAjGbtB,MAAQ,CACN,KAAQ,CAAC,aAAa,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,QAAQ,YAAY,QAAQ,QAAQ,IAAI,IAAI,KACtU,YAAe,eACf,QAAW,gIACX,IAAO,IACP,cAAiB,GACjB,cAAiB,EACjB,UAAY,EACZ,iBAAoB,I,EAEtBuB,gBAAkB,WAChB,IAAIC,EAAgB,GASpB,OARA,EAAKxB,MAAMyB,cAAcd,KAAI,SAACe,EAAUb,GACtC,IAAIc,EAAW,EAAK3B,MAAM4B,QAAQC,MAAM,IAAIH,GAI5C,OAHIF,EAAcM,SAASH,IACzBH,EAAcO,KAAKJ,GAEd,QAETvB,QAAQC,IAAI,kBAAmBmB,EAAcQ,KAAK,OAC3CR,EAAcQ,KAAK,O,wEAElB,IAAD,OACP,OAAI1B,KAAKN,MAAMiC,SAEX,yBAAKxB,UAAU,OACb,gEACA,qCAAWH,KAAKN,MAAMyB,cAAcS,OAApC,uBACA,8DAAoC5B,KAAKiB,kBAAzC,MAMF,yBAAKd,UAAU,OAKb,4CAAkBH,KAAKN,MAAMQ,aAC7B,yBAAKC,UAAU,cAEXH,KAAKN,MAAM4B,QAAQC,MAAM,IAAIlB,KAAI,SAACwB,EAAQtB,GACxC,IAAIuB,EAAc,GAUlB,OAREA,EADCvB,IAAU,EAAKb,MAAMqC,cACR,UAER,EAAKrC,MAAMyB,cAAcK,SAASjB,GAC1B,QAGA,SAET,0BAAMJ,UAAW2B,EAAaE,IAAKzB,GAAQsB,MAGtD,kBAAC,IAAD,CACEI,WAAYjC,KAAKN,MAAMwC,KACvBC,WACE,SAACH,EAAKI,GACJtC,QAAQC,IAAR,6CAAkDiC,IACvC,UAARA,IACE,EAAKtC,MAAM4B,QAAQC,MAAM,IAAI,EAAK7B,MAAMqC,iBAAmBzC,EAAa0C,GACtE,EAAKtC,MAAMqC,gBAAkB,EAAKrC,MAAM4B,QAAQC,MAAM,IAAIK,OAAO,GAClE9B,QAAQC,IAAI,YACZ,EAAKsC,SAAS,CACZV,UAAU,MAIZ7B,QAAQC,IAAI,oBACZ,EAAKsC,SAAS,CACZnC,YAAaZ,EAAa0C,GAC1BD,cAAe,EAAKrC,MAAMqC,cAAgB,KAK9C,EAAKM,SAAS,CACZnC,YAAaZ,EAAa0C,GAC1BM,iBAAkBN,EAClBb,cAAc,GAAD,mBAAM,EAAKzB,MAAMyB,eAAjB,CAA+B,EAAKzB,MAAMqC,uBASrE,kBAAC,EAAD,CAAiB7B,YAAeF,KAAKN,MAAMQ,YAAaqC,SAAYvC,KAAKsC,wB,GA3FjExB,IAAMC,WC9BJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBpD,WACrBA,UAAUqD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc60780f.chunk.js","sourcesContent":["const key_mappings = {\n\"a\": \"a\",\n\"b\": \"b\",\n\"c\": \"c\",\n\"d\": \"d\",\n\"e\": \"e\",\n\"f\": \"f\",\n\"g\": \"g\",\n\"h\": \"h\",\n\"i\": \"i\",\n\"j\": \"j\",\n\"k\": \"k\",\n\"l\": \"l\",\n\"m\": \"m\",\n\"n\": \"n\",\n\"o\": \"o\",\n\"p\": \"p\",\n\"q\": \"q\",\n\"r\": \"r\",\n\"s\": \"s\",\n\"t\": \"t\",\n\"u\": \"u\",\n\"v\": \"v\",\n\"w\": \"w\",\n\"x\": \"x\",\n\"y\": \"y\",\n\"z\": \"z\",\n\"shift+a\": \"A\",\n\"shift+b\": \"B\",\n\"shift+c\": \"C\",\n\"shift+d\": \"D\",\n\"shift+e\": \"E\",\n\"shift+f\": \"F\",\n\"shift+g\": \"G\",\n\"shift+h\": \"H\",\n\"shift+i\": \"I\",\n\"shift+j\": \"J\",\n\"shift+k\": \"K\",\n\"shift+l\": \"L\",\n\"shift+m\": \"M\",\n\"shift+n\": \"N\",\n\"shift+o\": \"O\",\n\"shift+p\": \"P\",\n\"shift+q\": \"Q\",\n\"shift+r\": \"R\",\n\"shift+s\": \"S\",\n\"shift+t\": \"T\",\n\"shift+u\": \"U\",\n\"shift+v\": \"V\",\n\"shift+w\": \"W\",\n\"shift+x\": \"X\",\n\"shift+y\": \"Y\",\n\"shift+z\": \"Z\",\n\"space\": \" \",\n\"backspace\": \"backspace\",\n\"enter\": \"enter\",\n\"shift\": \"shift\",\n\";\": \";\",\n\",\": \",\",\n\".\": \".\"\n}\n\nexport default key_mappings;","const keyboard_data = {\n    \"rows\": [\"num\",\"top\",\"hme\",\"btm\",\"ctrl\"],\n    \"num\": [\n            {\n                \"normal\": \"`\",\n                \"shift\": \"~\"\n            },\n            {\n                \"normal\": \"1\",\n                \"shift\": \"!\"\n            },\n            {\n                \"normal\": \"2\",\n                \"shift\": \"@\"\n            },\n            {\n                \"normal\": \"3\",\n                \"shift\": \"#\"\n            },\n            {\n                \"normal\": \"4\",\n                \"shift\": \"$\"\n            },\n            {\n                \"normal\": \"5\",\n                \"shift\": \"%\"\n            },\n            {\n                \"normal\": \"6\",\n                \"shift\": \"^\"\n            },\n            {\n                \"normal\": \"7\",\n                \"shift\": \"&\"\n            },\n            {\n                \"normal\": \"8\",\n                \"shift\": \"*\"\n            },\n            {\n                \"normal\": \"9\",\n                \"shift\": \"(\"\n            },\n            {\n                \"normal\": \"0\",\n                \"shift\": \")\"\n            },\n            {\n                \"normal\": \"-\",\n                \"shift\": \"_\"\n            },\n            {\n                \"normal\": \"=\",\n                \"shift\": \"+\"\n            },\n            {\n            \"ctrl\": \"backspace\"\n            }\n        ],\n    \"top\": [\n            {\n            \"ctrl\": \"tab\"\n            },\n            {\n                \"normal\": \"Q\"\n            },\n            {\n                \"normal\": \"W\"\n            },\n            {\n                \"normal\": \"E\"\n            },\n            {\n                \"normal\": \"R\"\n            },\n            {\n                \"normal\": \"T\"\n            },\n            {\n                \"normal\": \"Y\"\n            },\n            {\n                \"normal\": \"U\"\n            },\n            {\n                \"normal\": \"I\"\n            },\n            {\n                \"normal\": \"O\"\n            },\n            {\n                \"normal\": \"P\"\n            },\n            {\n                \"normal\": \"[\",\n                \"shift\": \"{\"\n            },\n            {\n                \"normal\": \"]\",\n                \"shift\": \"}\"\n            },\n            {\n                \"normal\": \"\\\\\",\n                \"shift\": \"|\"\n            }\n        ],\n    \"hme\": [\n            {\n                \"ctrl\": \"capslock\"\n            },\n            {\n                \"normal\": \"A\"\n            },\n            {\n                \"normal\": \"S\"\n            },\n            {\n                \"normal\": \"D\"\n            },\n            {\n                \"normal\": \"F\"\n            },\n            {\n                \"normal\": \"G\"\n            },\n            {\n                \"normal\": \"H\"\n            },\n            {\n                \"normal\": \"J\"\n            },\n            {\n                \"normal\": \"K\"\n            },\n            {\n                \"normal\": \"L\"\n            },\n            {\n                \"normal\": \";\",\n                \"shift\": \":\"\n            },\n            {\n                \"normal\": \"'\",\n                \"shift\": \"\\\"\"\n            },\n            {\n            \"ctrl\": \"enter\"\n            }\n        ],\n    \"btm\": [\n            {\n            \"ctrl\": \"shift\"\n            },\n            {\n                \"normal\": \"Z\"\n            },\n            {\n                \"normal\": \"X\"\n            },\n            {\n                \"normal\": \"C\"\n            },\n            {\n                \"normal\": \"V\"\n            },\n            {\n                \"normal\": \"B\"\n            },\n            {\n                \"normal\": \"N\"\n            },\n            {\n                \"normal\": \"M\"\n            },\n            {\n                \"normal\": \",\",\n                \"shift\": \"<\"\n            },\n            {\n                \"normal\": \".\",\n                \"shift\": \">\"\n            },\n            {\n                \"normal\": \"/\",\n                \"shift\": \"?\"\n            },\n            {\n            \"ctrl\": \"shift\"\n            }\n        ],\n\"ctrl\": [\n            {\n            \"ctrl\": \"ctrl\"\n            },\n            {\n            \"ctrl\": \"win\"\n            },\n            {\n            \"ctrl\": \"alt\"\n            },\n            {\n            \"ctrl\": \"space\"\n            },\n            {\n            \"ctrl\": \"alt\"\n            },\n            {\n            \"ctrl\": \"ctrl\"\n            }\n        ] \n}\n\nexport default keyboard_data;","import React from 'react';\nimport keyboard_data from './keyboard-data';\nconst rows = keyboard_data.rows;\nclass DisplayKeyboard extends React.Component {\n  state = {  }\n  detectOS = () => {\n    return navigator.platform\n  }\n  render() { \n    console.log(\"pressed key:\", this.props.pressed_key)\n    return (  \n      <div className=\"keyboard\">\n        <div className=\"keyboard-row\">\n          {keyboard_data.num.map((key_data,index)=>{\n            if (\"ctrl\" in key_data)\n              return  <div className={key_data.ctrl}>\n                        <div className=\"ctrlkeyname\">{key_data.ctrl}</div>\n                      </div>\n            else\n              return <div className=\"key\">\n                      <div className=\"keyname\">{key_data.shift}</div>\n                      <div className=\"keyname\">{key_data.normal}</div>\n                    </div>\n            })\n          }\n        </div>\n        <div className=\"keyboard-row\">\n          {keyboard_data.top.map((key_data,index)=>{\n            if (\"ctrl\" in key_data)\n              return  <div className={key_data.ctrl}>\n                        <div className=\"ctrlkeyname\">{key_data.ctrl}</div>\n                      </div>\n            else\n              return <div className=\"key\">\n                      <div className=\"keyname\">{key_data.shift}</div>\n                      <div className=\"keyname\">{key_data.normal}</div>\n                    </div>\n            })\n          }\n        </div>\n        <div className=\"keyboard-row\">\n          {keyboard_data.hme.map((key_data,index)=>{\n            if (\"ctrl\" in key_data)\n              return  <div className={key_data.ctrl}>\n                        <div className=\"ctrlkeyname\">{key_data.ctrl}</div>\n                      </div>\n            else\n              return <div className=\"key\">\n                      <div className=\"keyname\">{key_data.shift}</div>\n                      <div className=\"keyname\">{key_data.normal}</div>\n                    </div>\n            })\n          }\n        </div>\n        <div className=\"keyboard-row\">\n          {keyboard_data.btm.map((key_data,index)=>{\n            if (\"ctrl\" in key_data)\n              return  <div className={key_data.ctrl}>\n                        <div className=\"ctrlkeyname\">{key_data.ctrl}</div>\n                      </div>\n            else\n              return <div className=\"key\">\n                      <div className=\"keyname\">{key_data.shift}</div>\n                      <div className=\"keyname\">{key_data.normal}</div>\n                    </div>\n            })\n          }\n        </div>\n        <div className=\"keyboard-row\">\n          {keyboard_data.ctrl.map((key_data,index)=>{\n            if (\"ctrl\" in key_data)\n              if (key_data.ctrl === \"space\")\n                return  <div className={key_data.ctrl}>\n                          <div className=\"ctrlkeyname\"></div>\n                        </div>\n              else\n                return  <div className={key_data.ctrl}>\n                          <div className=\"ctrlkeyname\">{key_data.ctrl}</div>\n                        </div>\n            else\n              return <div className=\"key\">\n                      <div className=\"keyname\">{key_data.shift}</div>\n                      <div className=\"keyname\">{key_data.normal}</div>\n                    </div>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default DisplayKeyboard;\n\n// console.log(detectOS());\n\n// export default detectOS;","import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport './App.css';\nimport key_mappings from './key-mappings';\nimport DisplayKeyboard from './DisplayKeyboard';\n\n/**\n * ****** MAINTENANCE HISTORY ******\n * \n * ######### SYMBOL & MEANING ##############\n * -- TODO FINISHED\n * - TODO\n * --- STATUS \n * \n * --record key strokes, detect which key is pressed\n * \n * key strokes recorded.\n * --keep para a string, split to a character array\n * --display each character with span tag\n * --span tag has three styles: normal(default), red text color(mistake), blinking(toggle b/w normal and black background)\n * --use state object to iterate the character array and check condition update state and move to next char \n * \n * blinking, mistake, current, normal styles updated\n * check condition and move to next char working and accordingly update set styles\n * \n * -break it into small components\n * -create a dummy paras for every letter\n * -iterate paras.\n * --once a para is finished show the stats\n * -get the hand gesture style to work\n * -dynamically generate paras\n * \n * iterated one para. showed stats after the para is finished\n * -design keyboard and hand style\n * \n * -research hosting on github.io pages\n * \n * -break into small components\n * -night mode\n * -dynamic keyboard display based on platform\n */\n\nclass App extends React.Component {\n  state = { \n    \"keys\": [\"alphabetic\",\"shift+a\",\"shift+b\",\"shift+c\",\"shift+d\",\"shift+e\",\"shift+f\",\"shift+g\",\"shift+h\",\"shift+i\",\"shift+j\",\"shift+k\",\"shift+l\",\"shift+m\",\"shift+n\",\"shift+o\",\"shift+p\",\"shift+q\",\"shift+r\",\"shift+s\",\"shift+t\",\"shift+u\",\"shift+v\",\"shift+w\",\"shift+x\",\"shift+y\",\"shift+z\",\"space\",\"backspace\",\"enter\",\"shift\",\";\",\",\",\".\"],\n    \"pressed_key\": \"start typing\",\n    \"letters\": \"ine eletten lier eren letter lier nient rel teet letten inent ter tell treet ener ree ten lette ner nient tree ree nient tree\",\n    \"len\": 125,\n    \"error_indexes\": [],\n    \"current_index\": 0,\n    \"finished\": false,\n    \"pressed_key_code\": \"\"\n  }\n  getPractiseKeys = () => {\n    let practise_keys = []\n    this.state.error_indexes.map((keyIndex, index) => {\n      let keyValue = this.state.letters.split(\"\")[keyIndex]\n      if(!practise_keys.includes(keyValue)){\n        practise_keys.push(keyValue)\n      }\n      return null\n    })\n    console.log(\"practise_keys: \", practise_keys.join(\", \"))\n    return practise_keys.join(\", \")\n  }\n  render() { \n    if (this.state.finished){\n      return ( \n        <div className=\"App\">\n          <h2>Congratulations Lesson finished!</h2>\n          <p>Stats: {this.state.error_indexes.length} wrong key strokes </p>\n          <p>These keys needs more practise: {this.getPractiseKeys()} </p>\n        </div>\n      );\n    }\n    else{\n      return ( \n        <div className=\"App\">\n          {/* console.log(this.state.letters.length) \n            console.log(key_mappings)*/\n            // console.log(\"error_indexes\",this.state.error_indexes)\n          }\n          <h1>Pressed key: {this.state.pressed_key}</h1>\n          <div className=\"ContentBox\">\n            {\n              this.state.letters.split(\"\").map((letter, index) => {\n                let letterStyle = \"\";\n                if(index === this.state.current_index){\n                  letterStyle = \"Current\"\n                }\n                else if(this.state.error_indexes.includes(index)){\n                  letterStyle = \"Wrong\"\n                }\n                else{\n                  letterStyle = \"Normal\"\n                }\n                return(<span className={letterStyle} key={index}>{letter}</span>)\n              })\n            }\n            <KeyboardEventHandler\n              handleKeys={this.state.keys}\n              onKeyEvent={\n                (key, e) => {\n                  console.log(`do something upon keydown event of ${key}`);\n                  if(key !== \"shift\"){\n                    if(this.state.letters.split(\"\")[this.state.current_index] === key_mappings[key]){\n                      if(this.state.current_index === this.state.letters.split(\"\").length-1){\n                        console.log(\"finished\")\n                        this.setState({ \n                          finished: true\n                        })\n                      }\n                      else{\n                        console.log(\"not yet finished\")\n                        this.setState({ \n                          pressed_key: key_mappings[key],\n                          current_index: this.state.current_index + 1\n                        })\n                      }\n                    }\n                    else{\n                      this.setState({ \n                        pressed_key: key_mappings[key],\n                        pressed_key_code: key,\n                        error_indexes: [...this.state.error_indexes,this.state.current_index]\n                      })\n                    }\n                  }\n                  \n                }\n              } \n            />\n          </div>\n          <DisplayKeyboard pressed_key = {this.state.pressed_key} key_code = {this.pressed_key_code}/>\n        </div>\n      );\n    }\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}